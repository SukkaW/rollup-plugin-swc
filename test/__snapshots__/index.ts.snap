// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rollup-plugin-swc3 swc (rollup 2) directive - include "use client" 1`] = `
"'use client';
function client() {
    return React.useState(null);
}

export { client as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) directive - merge "use client" 1`] = `
"'use client';
'use sukka';
var foo = 'sukka';

var bar = 'sukka';

export { bar, foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) directive - only output "use client" / "use server" in the specfic entry 1`] = `
"'use client';
var foo = 'client';

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) directive - only output "use client" / "use server" in the specfic entry 2`] = `
"'use server';
var bar = 'server';

export { bar };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) disable reading tsconfig.json 1`] = `
"const foo = 1;

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) issue 58 - eventemitter3 1`] = `
"function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var eventemitter3 = {exports: {}};

eventemitter3.exports;

(function (module) {

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our \`EE\` objects.
	 * An \`Events\` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from \`Object.prototype\`. In some engines creating an
	// instance in this way is faster than calling \`Object.create(null)\` directly.
	// If \`Object.create(null)\` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the \`__proto__\` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal \`EventEmitter\` interface that is molded against the Node.js
	 * \`EventEmitter\` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} \`true\` if the event had listeners, else \`false\`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow \`EventEmitter\` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	{
	  module.exports = EventEmitter;
	} 
} (eventemitter3));

var eventemitter3Exports = eventemitter3.exports;
var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

// @ts-expect-error -- the dependency is only installed during test
var ee = new EventEmitter();
ee.on('test', function() {
    console.log('test');
});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) issue 63 - tsconfig baseUrl only + relative baseUrl 1`] = `
"function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError(\\"Cannot initialize the same private elements twice on an object\\");
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function test(s) {
    console.log(s);
}
test('hello swc!');
var _es2022Feature = /*#__PURE__*/ new WeakMap();
var Test = function Test() {
    _class_call_check(this, Test);
    _class_private_field_init(this, _es2022Feature, {
        writable: true,
        value: true
    });
};

export { Test };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) load json 1`] = `
"var foo = true;
var foo$1 = {
	foo: foo
};

console.log(foo$1);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) load jsx/tsx 1`] = `
"const util = 42;

class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"sukka\\"
        }, util);
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) minify 1`] = `
"console.log(class{render(){return /*#__PURE__*/React.createElement(\\"div\\",{className:\\"hehe\\"},\\"hello there!!!\\")}});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) react 17 jsx transform 1`] = `
"import { jsx } from 'react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) react 17 jsx transform 2`] = `
"import { jsx } from '@compiled/react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) resolve index.(x) 1`] = `
"class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"hehe\\"
        }, \\"hello there!!!\\");
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) simple 1`] = `
"function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if (\\"value\\" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Foo = /*#__PURE__*/ function() {
    function Foo() {
        _class_call_check(this, Foo);
    }
    _create_class(Foo, [
        {
            key: \\"render\\",
            value: function render() {
                return /*#__PURE__*/ React.createElement(\\"div\\", {
                    className: \\"hehe\\"
                }, \\"hello there!!!\\");
            }
        }
    ]);
    return Foo;
}();

var bar = 'baz';

console.log(Foo);
console.log(bar);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) standalone minify 1`] = `
"console.log(1e4),console.log(\\"bc\\");
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) support rollup virtual module (e.g. commonjs plugin) 1`] = `
"var rollupCommonjs = {};

var foo = 'foo';

var bar = {};

bar.Bar = 'bar';

const Foo = foo;
const { Bar } = bar;
console.log(Foo, Bar);

export { rollupCommonjs as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) target - include other files 1`] = `
"var foo = 'sukka';

console.log(foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig - baseUrl & paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig - paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig - specify full path 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig extends 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig extends 2`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig resolve to nearest tsconfig 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

var bar = /*#__PURE__*/ hBar(\\"div\\", null, \\"bar\\");

var baz = /*#__PURE__*/ h(\\"div\\", null, foo, bar);

export { baz };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) use custom jsxFactory (h) from jsconfig.json 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) use custom jsxFactory (h) from tsconfig 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) use custom tsconfig.json 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) use tsconfig.json when tsconfig.json & jsconfig.json both exists 1`] = `
"var foo = /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(\\"div\\", null, \\"foo\\"));

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) directive - include "use client" 1`] = `
"'use client';
function client() {
    return React.useState(null);
}

export { client as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) directive - merge "use client" 1`] = `
"'use client';
'use sukka';
var foo = 'sukka';

var bar = 'sukka';

export { bar, foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) directive - only output "use client" / "use server" in the specfic entry 1`] = `
"'use client';
var foo = 'client';

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) directive - only output "use client" / "use server" in the specfic entry 2`] = `
"'use server';
var bar = 'server';

export { bar };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) disable reading tsconfig.json 1`] = `
"const foo = 1;

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) issue 58 - eventemitter3 1`] = `
"function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var eventemitter3 = {exports: {}};

(function (module) {

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our \`EE\` objects.
	 * An \`Events\` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from \`Object.prototype\`. In some engines creating an
	// instance in this way is faster than calling \`Object.create(null)\` directly.
	// If \`Object.create(null)\` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the \`__proto__\` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal \`EventEmitter\` interface that is molded against the Node.js
	 * \`EventEmitter\` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} \`true\` if the event had listeners, else \`false\`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow \`EventEmitter\` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	{
	  module.exports = EventEmitter;
	} 
} (eventemitter3));

var eventemitter3Exports = eventemitter3.exports;
var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

// @ts-expect-error -- the dependency is only installed during test
var ee = new EventEmitter();
ee.on('test', function() {
    console.log('test');
});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) issue 63 - tsconfig baseUrl only + relative baseUrl 1`] = `
"function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError(\\"Cannot initialize the same private elements twice on an object\\");
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function test(s) {
    console.log(s);
}
test('hello swc!');
var _es2022Feature = /*#__PURE__*/ new WeakMap();
var Test = function Test() {
    _class_call_check(this, Test);
    _class_private_field_init(this, _es2022Feature, {
        writable: true,
        value: true
    });
};

export { Test };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) load json 1`] = `
"var foo = true;
var foo$1 = {
	foo: foo
};

console.log(foo$1);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) load jsx/tsx 1`] = `
"const util = 42;

class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"sukka\\"
        }, util);
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) minify 1`] = `
"console.log(class{render(){return /*#__PURE__*/React.createElement(\\"div\\",{className:\\"hehe\\"},\\"hello there!!!\\")}});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) react 17 jsx transform 1`] = `
"import { jsx } from 'react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) react 17 jsx transform 2`] = `
"import { jsx } from '@compiled/react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) resolve index.(x) 1`] = `
"class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"hehe\\"
        }, \\"hello there!!!\\");
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) simple 1`] = `
"function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if (\\"value\\" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Foo = /*#__PURE__*/ function() {
    function Foo() {
        _class_call_check(this, Foo);
    }
    _create_class(Foo, [
        {
            key: \\"render\\",
            value: function render() {
                return /*#__PURE__*/ React.createElement(\\"div\\", {
                    className: \\"hehe\\"
                }, \\"hello there!!!\\");
            }
        }
    ]);
    return Foo;
}();

var bar = 'baz';

console.log(Foo);
console.log(bar);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) standalone minify 1`] = `
"console.log(1e4),console.log(\\"bc\\");
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) support rollup virtual module (e.g. commonjs plugin) 1`] = `
"var rollupCommonjs = {};

var foo = 'foo';

var bar = {};

bar.Bar = 'bar';

const Foo = foo;
const { Bar } = bar;
console.log(Foo, Bar);

export { rollupCommonjs as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) target - include other files 1`] = `
"var foo = 'sukka';

console.log(foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig - baseUrl & paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig - paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig - specify full path 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig extends 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig extends 2`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig resolve to nearest tsconfig 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

var bar = /*#__PURE__*/ hBar(\\"div\\", null, \\"bar\\");

var baz = /*#__PURE__*/ h(\\"div\\", null, foo, bar);

export { baz };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) use custom jsxFactory (h) from jsconfig.json 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) use custom jsxFactory (h) from tsconfig 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) use custom tsconfig.json 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) use tsconfig.json when tsconfig.json & jsconfig.json both exists 1`] = `
"var foo = /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(\\"div\\", null, \\"foo\\"));

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) directive - include "use client" 1`] = `
"'use client';
function client() {
    return React.useState(null);
}

export { client as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) directive - merge "use client" 1`] = `
"'use client';
'use sukka';
var foo = 'sukka';

var bar = 'sukka';

export { bar, foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) directive - only output "use client" / "use server" in the specfic entry 1`] = `
"'use client';
var foo = 'client';

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) directive - only output "use client" / "use server" in the specfic entry 2`] = `
"'use server';
var bar = 'server';

export { bar };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) disable reading tsconfig.json 1`] = `
"const foo = 1;

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) issue 58 - eventemitter3 1`] = `
"function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var eventemitter3 = {exports: {}};

(function (module) {

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our \`EE\` objects.
	 * An \`Events\` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from \`Object.prototype\`. In some engines creating an
	// instance in this way is faster than calling \`Object.create(null)\` directly.
	// If \`Object.create(null)\` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the \`__proto__\` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal \`EventEmitter\` interface that is molded against the Node.js
	 * \`EventEmitter\` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} \`true\` if the event had listeners, else \`false\`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} \`this\`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow \`EventEmitter\` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	{
	  module.exports = EventEmitter;
	} 
} (eventemitter3));

var eventemitter3Exports = eventemitter3.exports;
var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

// @ts-expect-error -- the dependency is only installed during test
var ee = new EventEmitter();
ee.on('test', function() {
    console.log('test');
});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) issue 63 - tsconfig baseUrl only + relative baseUrl 1`] = `
"function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError(\\"Cannot initialize the same private elements twice on an object\\");
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function test(s) {
    console.log(s);
}
test('hello swc!');
var _es2022Feature = /*#__PURE__*/ new WeakMap();
var Test = function Test() {
    _class_call_check(this, Test);
    _class_private_field_init(this, _es2022Feature, {
        writable: true,
        value: true
    });
};

export { Test };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) load json 1`] = `
"var foo = true;
var foo$1 = {
	foo: foo
};

console.log(foo$1);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) load jsx/tsx 1`] = `
"const util = 42;

class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"sukka\\"
        }, util);
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) minify 1`] = `
"console.log(class{render(){return /*#__PURE__*/React.createElement(\\"div\\",{className:\\"hehe\\"},\\"hello there!!!\\")}});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) react 17 jsx transform 1`] = `
"import { jsx } from 'react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) react 17 jsx transform 2`] = `
"import { jsx } from '@compiled/react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) resolve index.(x) 1`] = `
"class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"hehe\\"
        }, \\"hello there!!!\\");
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) simple 1`] = `
"function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if (\\"value\\" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    return Constructor;
}
var Foo = /*#__PURE__*/ function() {
    function Foo() {
        _class_call_check(this, Foo);
    }
    _create_class(Foo, [
        {
            key: \\"render\\",
            value: function render() {
                return /*#__PURE__*/ React.createElement(\\"div\\", {
                    className: \\"hehe\\"
                }, \\"hello there!!!\\");
            }
        }
    ]);
    return Foo;
}();

var bar = 'baz';

console.log(Foo);
console.log(bar);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) standalone minify 1`] = `
"console.log(1e4),console.log(\\"bc\\");
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) support rollup virtual module (e.g. commonjs plugin) 1`] = `
"var rollupCommonjs = {};

var foo = 'foo';

var bar = {};

bar.Bar = 'bar';

const Foo = foo;
const { Bar } = bar;
console.log(Foo, Bar);

export { rollupCommonjs as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) target - include other files 1`] = `
"var foo = 'sukka';

console.log(foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig - baseUrl & paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig - paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig - specify full path 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig extends 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig extends 2`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig resolve to nearest tsconfig 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

var bar = /*#__PURE__*/ hBar(\\"div\\", null, \\"bar\\");

var baz = /*#__PURE__*/ h(\\"div\\", null, foo, bar);

export { baz };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) use custom jsxFactory (h) from jsconfig.json 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) use custom jsxFactory (h) from tsconfig 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) use custom tsconfig.json 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) use tsconfig.json when tsconfig.json & jsconfig.json both exists 1`] = `
"var foo = /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(\\"div\\", null, \\"foo\\"));

export { foo };
"
`;
