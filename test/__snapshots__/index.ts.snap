// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rollup-plugin-swc3 swc (rollup 2) detect  decorator for typescript5 1`] = `
"function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== \\"undefined\\" && arr[Symbol.iterator] || arr[\\"@@iterator\\"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i[\\"return\\"] != null) _i[\\"return\\"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError(\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === \\"string\\") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === \\"Object\\" && o.constructor) n = o.constructor.name;
    if (n === \\"Map\\" || n === \\"Set\\") return Array.from(n);
    if (n === \\"Arguments\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function applyDecs2203RFactory() {
    function createAddInitializerMethod(initializers, decoratorFinishedRef) {
        return function addInitializer(initializer) {
            assertNotFinished(decoratorFinishedRef, \\"addInitializer\\");
            assertCallable(initializer, \\"An initializer\\");
            initializers.push(initializer);
        };
    }
    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {
        var kindStr;
        switch(kind){
            case 1:
                kindStr = \\"accessor\\";
                break;
            case 2:
                kindStr = \\"method\\";
                break;
            case 3:
                kindStr = \\"getter\\";
                break;
            case 4:
                kindStr = \\"setter\\";
                break;
            default:
                kindStr = \\"field\\";
        }
        var ctx = {
            kind: kindStr,
            name: isPrivate ? \\"#\\" + name : name,
            static: isStatic,
            private: isPrivate,
            metadata: metadata
        };
        var decoratorFinishedRef = {
            v: false
        };
        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
        var get, set;
        if (kind === 0) {
            if (isPrivate) {
                get = desc.get;
                set = desc.set;
            } else {
                get = function() {
                    return this[name];
                };
                set = function(v) {
                    this[name] = v;
                };
            }
        } else if (kind === 2) {
            get = function() {
                return desc.value;
            };
        } else {
            if (kind === 1 || kind === 3) {
                get = function() {
                    return desc.get.call(this);
                };
            }
            if (kind === 1 || kind === 4) {
                set = function(v) {
                    desc.set.call(this, v);
                };
            }
        }
        ctx.access = get && set ? {
            get: get,
            set: set
        } : get ? {
            get: get
        } : {
            set: set
        };
        try {
            return dec(value, ctx);
        } finally{
            decoratorFinishedRef.v = true;
        }
    }
    function assertNotFinished(decoratorFinishedRef, fnName) {
        if (decoratorFinishedRef.v) {
            throw new Error(\\"attempted to call \\" + fnName + \\" after decoration was finished\\");
        }
    }
    function assertCallable(fn, hint) {
        if (typeof fn !== \\"function\\") {
            throw new TypeError(hint + \\" must be a function\\");
        }
    }
    function assertValidReturnValue(kind, value) {
        var type = typeof value;
        if (kind === 1) {
            if (type !== \\"object\\" || value === null) {
                throw new TypeError(\\"accessor decorators must return an object with get, set, or init properties or void 0\\");
            }
            if (value.get !== undefined) {
                assertCallable(value.get, \\"accessor.get\\");
            }
            if (value.set !== undefined) {
                assertCallable(value.set, \\"accessor.set\\");
            }
            if (value.init !== undefined) {
                assertCallable(value.init, \\"accessor.init\\");
            }
        } else if (type !== \\"function\\") {
            var hint;
            if (kind === 0) {
                hint = \\"field\\";
            } else if (kind === 10) {
                hint = \\"class\\";
            } else {
                hint = \\"method\\";
            }
            throw new TypeError(hint + \\" decorators must return a function or void 0\\");
        }
    }
    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {
        var decs = decInfo[0];
        var desc, init, value;
        if (isPrivate) {
            if (kind === 0 || kind === 1) {
                desc = {
                    get: decInfo[3],
                    set: decInfo[4]
                };
            } else if (kind === 3) {
                desc = {
                    get: decInfo[3]
                };
            } else if (kind === 4) {
                desc = {
                    set: decInfo[3]
                };
            } else {
                desc = {
                    value: decInfo[3]
                };
            }
        } else if (kind !== 0) {
            desc = Object.getOwnPropertyDescriptor(base, name);
        }
        if (kind === 1) {
            value = {
                get: desc.get,
                set: desc.set
            };
        } else if (kind === 2) {
            value = desc.value;
        } else if (kind === 3) {
            value = desc.get;
        } else if (kind === 4) {
            value = desc.set;
        }
        var newValue, get, set;
        if (typeof decs === \\"function\\") {
            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
            if (newValue !== void 0) {
                assertValidReturnValue(kind, newValue);
                if (kind === 0) {
                    init = newValue;
                } else if (kind === 1) {
                    init = newValue.init;
                    get = newValue.get || value.get;
                    set = newValue.set || value.set;
                    value = {
                        get: get,
                        set: set
                    };
                } else {
                    value = newValue;
                }
            }
        } else {
            for(var i = decs.length - 1; i >= 0; i--){
                var dec = decs[i];
                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
                if (newValue !== void 0) {
                    assertValidReturnValue(kind, newValue);
                    var newInit;
                    if (kind === 0) {
                        newInit = newValue;
                    } else if (kind === 1) {
                        newInit = newValue.init;
                        get = newValue.get || value.get;
                        set = newValue.set || value.set;
                        value = {
                            get: get,
                            set: set
                        };
                    } else {
                        value = newValue;
                    }
                    if (newInit !== void 0) {
                        if (init === void 0) {
                            init = newInit;
                        } else if (typeof init === \\"function\\") {
                            init = [
                                init,
                                newInit
                            ];
                        } else {
                            init.push(newInit);
                        }
                    }
                }
            }
        }
        if (kind === 0 || kind === 1) {
            if (init === void 0) {
                init = function(instance, init) {
                    return init;
                };
            } else if (typeof init !== \\"function\\") {
                var ownInitializers = init;
                init = function(instance, init) {
                    var value = init;
                    for(var i = 0; i < ownInitializers.length; i++){
                        value = ownInitializers[i].call(instance, value);
                    }
                    return value;
                };
            } else {
                var originalInitializer = init;
                init = function(instance, init) {
                    return originalInitializer.call(instance, init);
                };
            }
            ret.push(init);
        }
        if (kind !== 0) {
            if (kind === 1) {
                desc.get = value.get;
                desc.set = value.set;
            } else if (kind === 2) {
                desc.value = value;
            } else if (kind === 3) {
                desc.get = value;
            } else if (kind === 4) {
                desc.set = value;
            }
            if (isPrivate) {
                if (kind === 1) {
                    ret.push(function(instance, args) {
                        return value.get.call(instance, args);
                    });
                    ret.push(function(instance, args) {
                        return value.set.call(instance, args);
                    });
                } else if (kind === 2) {
                    ret.push(value);
                } else {
                    ret.push(function(instance, args) {
                        return value.call(instance, args);
                    });
                }
            } else {
                Object.defineProperty(base, name, desc);
            }
        }
    }
    function applyMemberDecs(Class, decInfos, metadata) {
        var ret = [];
        var protoInitializers;
        var staticInitializers;
        var existingProtoNonFields = new Map();
        var existingStaticNonFields = new Map();
        for(var i = 0; i < decInfos.length; i++){
            var decInfo = decInfos[i];
            if (!Array.isArray(decInfo)) continue;
            var kind = decInfo[1];
            var name = decInfo[2];
            var isPrivate = decInfo.length > 3;
            var isStatic = kind >= 5;
            var base;
            var initializers;
            if (isStatic) {
                base = Class;
                kind = kind - 5;
                staticInitializers = staticInitializers || [];
                initializers = staticInitializers;
            } else {
                base = Class.prototype;
                protoInitializers = protoInitializers || [];
                initializers = protoInitializers;
            }
            if (kind !== 0 && !isPrivate) {
                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
                var existingKind = existingNonFields.get(name) || 0;
                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {
                    throw new Error(\\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \\" + name);
                } else if (!existingKind && kind > 2) {
                    existingNonFields.set(name, kind);
                } else {
                    existingNonFields.set(name, true);
                }
            }
            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);
        }
        pushInitializers(ret, protoInitializers);
        pushInitializers(ret, staticInitializers);
        return ret;
    }
    function pushInitializers(ret, initializers) {
        if (initializers) {
            ret.push(function(instance) {
                for(var i = 0; i < initializers.length; i++){
                    initializers[i].call(instance);
                }
                return instance;
            });
        }
    }
    function applyClassDecs(targetClass, classDecs, metadata) {
        if (classDecs.length > 0) {
            var initializers = [];
            var newClass = targetClass;
            var name = targetClass.name;
            for(var i = classDecs.length - 1; i >= 0; i--){
                var decoratorFinishedRef = {
                    v: false
                };
                try {
                    var nextNewClass = classDecs[i](newClass, {
                        kind: \\"class\\",
                        name: name,
                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),
                        metadata
                    });
                } finally{
                    decoratorFinishedRef.v = true;
                }
                if (nextNewClass !== undefined) {
                    assertValidReturnValue(10, nextNewClass);
                    newClass = nextNewClass;
                }
            }
            return [
                defineMetadata(newClass, metadata),
                function() {
                    for(var i = 0; i < initializers.length; i++){
                        initializers[i].call(newClass);
                    }
                }
            ];
        }
    }
    function defineMetadata(Class, metadata) {
        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\\"Symbol.metadata\\"), {
            configurable: true,
            enumerable: true,
            value: metadata
        });
    }
    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {
        if (parentClass !== void 0) {
            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\\"Symbol.metadata\\")];
        }
        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);
        var e = applyMemberDecs(targetClass, memberDecs, metadata);
        if (!classDecs.length) defineMetadata(targetClass, metadata);
        return {
            e: e,
            get c () {
                return applyClassDecs(targetClass, classDecs, metadata);
            }
        };
    };
}
function _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {
    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);
}
var // @ts-expect-error
_init_name;
var printMemberName = function(target, memberName) {
    console.log(memberName);
};
var Person = function Person() {
    _class_call_check(this, Person);
    _define_property(this, \\"name\\", _init_name(this, \\"Jon\\"));
};
var ref, ref1;
ref = _apply_decs_2203_r(Person, [
    [
        printMemberName,
        0,
        \\"name\\"
    ]
], []), ref1 = _sliced_to_array(ref.e, 1), _init_name = ref1[0];
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) directive - include "use client" 1`] = `
"'use client';
function client() {
    return React.useState(null);
}

export { client as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) directive - merge "use client" 1`] = `
"'use client';
'use sukka';
var foo = 'sukka';

var bar = 'sukka';

export { bar, foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) directive - only output "use client" / "use server" in the specfic entry 1`] = `
"'use client';
var foo = 'client';

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) directive - only output "use client" / "use server" in the specfic entry 2`] = `
"'use server';
var bar = 'server';

export { bar };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) disable reading tsconfig.json 1`] = `
"const foo = 1;

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) issue 58 - eventemitter3 1`] = `
"function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var eventemitter3 = {exports: {}};

eventemitter3.exports;

var hasRequiredEventemitter3;

function requireEventemitter3 () {
	if (hasRequiredEventemitter3) return eventemitter3.exports;
	hasRequiredEventemitter3 = 1;
	(function (module) {

		var has = Object.prototype.hasOwnProperty
		  , prefix = '~';

		/**
		 * Constructor to create a storage for our \`EE\` objects.
		 * An \`Events\` instance is a plain object whose properties are event names.
		 *
		 * @constructor
		 * @private
		 */
		function Events() {}

		//
		// We try to not inherit from \`Object.prototype\`. In some engines creating an
		// instance in this way is faster than calling \`Object.create(null)\` directly.
		// If \`Object.create(null)\` is not supported we prefix the event names with a
		// character to make sure that the built-in object properties are not
		// overridden or used as an attack vector.
		//
		if (Object.create) {
		  Events.prototype = Object.create(null);

		  //
		  // This hack is needed because the \`__proto__\` property is still inherited in
		  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
		  //
		  if (!new Events().__proto__) prefix = false;
		}

		/**
		 * Representation of a single event listener.
		 *
		 * @param {Function} fn The listener function.
		 * @param {*} context The context to invoke the listener with.
		 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
		 * @constructor
		 * @private
		 */
		function EE(fn, context, once) {
		  this.fn = fn;
		  this.context = context;
		  this.once = once || false;
		}

		/**
		 * Add a listener for a given event.
		 *
		 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} context The context to invoke the listener with.
		 * @param {Boolean} once Specify if the listener is a one-time listener.
		 * @returns {EventEmitter}
		 * @private
		 */
		function addListener(emitter, event, fn, context, once) {
		  if (typeof fn !== 'function') {
		    throw new TypeError('The listener must be a function');
		  }

		  var listener = new EE(fn, context || emitter, once)
		    , evt = prefix ? prefix + event : event;

		  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
		  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
		  else emitter._events[evt] = [emitter._events[evt], listener];

		  return emitter;
		}

		/**
		 * Clear event by name.
		 *
		 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
		 * @param {(String|Symbol)} evt The Event name.
		 * @private
		 */
		function clearEvent(emitter, evt) {
		  if (--emitter._eventsCount === 0) emitter._events = new Events();
		  else delete emitter._events[evt];
		}

		/**
		 * Minimal \`EventEmitter\` interface that is molded against the Node.js
		 * \`EventEmitter\` interface.
		 *
		 * @constructor
		 * @public
		 */
		function EventEmitter() {
		  this._events = new Events();
		  this._eventsCount = 0;
		}

		/**
		 * Return an array listing the events for which the emitter has registered
		 * listeners.
		 *
		 * @returns {Array}
		 * @public
		 */
		EventEmitter.prototype.eventNames = function eventNames() {
		  var names = []
		    , events
		    , name;

		  if (this._eventsCount === 0) return names;

		  for (name in (events = this._events)) {
		    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
		  }

		  if (Object.getOwnPropertySymbols) {
		    return names.concat(Object.getOwnPropertySymbols(events));
		  }

		  return names;
		};

		/**
		 * Return the listeners registered for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Array} The registered listeners.
		 * @public
		 */
		EventEmitter.prototype.listeners = function listeners(event) {
		  var evt = prefix ? prefix + event : event
		    , handlers = this._events[evt];

		  if (!handlers) return [];
		  if (handlers.fn) return [handlers.fn];

		  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
		    ee[i] = handlers[i].fn;
		  }

		  return ee;
		};

		/**
		 * Return the number of listeners listening to a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Number} The number of listeners.
		 * @public
		 */
		EventEmitter.prototype.listenerCount = function listenerCount(event) {
		  var evt = prefix ? prefix + event : event
		    , listeners = this._events[evt];

		  if (!listeners) return 0;
		  if (listeners.fn) return 1;
		  return listeners.length;
		};

		/**
		 * Calls each of the listeners registered for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Boolean} \`true\` if the event had listeners, else \`false\`.
		 * @public
		 */
		EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
		  var evt = prefix ? prefix + event : event;

		  if (!this._events[evt]) return false;

		  var listeners = this._events[evt]
		    , len = arguments.length
		    , args
		    , i;

		  if (listeners.fn) {
		    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

		    switch (len) {
		      case 1: return listeners.fn.call(listeners.context), true;
		      case 2: return listeners.fn.call(listeners.context, a1), true;
		      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
		      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
		      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
		      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
		    }

		    for (i = 1, args = new Array(len -1); i < len; i++) {
		      args[i - 1] = arguments[i];
		    }

		    listeners.fn.apply(listeners.context, args);
		  } else {
		    var length = listeners.length
		      , j;

		    for (i = 0; i < length; i++) {
		      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

		      switch (len) {
		        case 1: listeners[i].fn.call(listeners[i].context); break;
		        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
		        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
		        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
		        default:
		          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
		            args[j - 1] = arguments[j];
		          }

		          listeners[i].fn.apply(listeners[i].context, args);
		      }
		    }
		  }

		  return true;
		};

		/**
		 * Add a listener for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} [context=this] The context to invoke the listener with.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.on = function on(event, fn, context) {
		  return addListener(this, event, fn, context, false);
		};

		/**
		 * Add a one-time listener for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} [context=this] The context to invoke the listener with.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.once = function once(event, fn, context) {
		  return addListener(this, event, fn, context, true);
		};

		/**
		 * Remove the listeners of a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn Only remove the listeners that match this function.
		 * @param {*} context Only remove the listeners that have this context.
		 * @param {Boolean} once Only remove one-time listeners.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
		  var evt = prefix ? prefix + event : event;

		  if (!this._events[evt]) return this;
		  if (!fn) {
		    clearEvent(this, evt);
		    return this;
		  }

		  var listeners = this._events[evt];

		  if (listeners.fn) {
		    if (
		      listeners.fn === fn &&
		      (!once || listeners.once) &&
		      (!context || listeners.context === context)
		    ) {
		      clearEvent(this, evt);
		    }
		  } else {
		    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
		      if (
		        listeners[i].fn !== fn ||
		        (once && !listeners[i].once) ||
		        (context && listeners[i].context !== context)
		      ) {
		        events.push(listeners[i]);
		      }
		    }

		    //
		    // Reset the array, or remove it completely if we have no more listeners.
		    //
		    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
		    else clearEvent(this, evt);
		  }

		  return this;
		};

		/**
		 * Remove all listeners, or those of the specified event.
		 *
		 * @param {(String|Symbol)} [event] The event name.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
		  var evt;

		  if (event) {
		    evt = prefix ? prefix + event : event;
		    if (this._events[evt]) clearEvent(this, evt);
		  } else {
		    this._events = new Events();
		    this._eventsCount = 0;
		  }

		  return this;
		};

		//
		// Alias methods names because people roll like that.
		//
		EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
		EventEmitter.prototype.addListener = EventEmitter.prototype.on;

		//
		// Expose the prefix.
		//
		EventEmitter.prefixed = prefix;

		//
		// Allow \`EventEmitter\` to be imported as module namespace.
		//
		EventEmitter.EventEmitter = EventEmitter;

		//
		// Expose the module.
		//
		{
		  module.exports = EventEmitter;
		} 
	} (eventemitter3));
	return eventemitter3.exports;
}

var eventemitter3Exports = requireEventemitter3();
var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

// @ts-expect-error -- the dependency is only installed during test
var ee = new EventEmitter();
ee.on('test', function() {
    console.log('test');
});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) issue 63 - tsconfig baseUrl only + relative baseUrl 1`] = `
"function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError(\\"Cannot initialize the same private elements twice on an object\\");
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function test(s) {
    console.log(s);
}
test('hello swc!');
var _es2022Feature = /*#__PURE__*/ new WeakMap();
var Test = function Test() {
    _class_call_check(this, Test);
    _class_private_field_init(this, _es2022Feature, {
        writable: true,
        value: true
    });
};

export { Test };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) load json 1`] = `
"var foo = true;
var foo$1 = {
	foo: foo
};

console.log(foo$1);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) load jsx/tsx 1`] = `
"const util = 42;

class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"sukka\\"
        }, util);
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) minify 1`] = `
"console.log(class{render(){return /*#__PURE__*/React.createElement(\\"div\\",{className:\\"hehe\\"},\\"hello there!!!\\")}});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) react 17 jsx transform 1`] = `
"import { jsx } from 'react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) react 17 jsx transform 2`] = `
"import { jsx } from '@compiled/react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) resolve index.(x) 1`] = `
"class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"hehe\\"
        }, \\"hello there!!!\\");
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) simple 1`] = `
"function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if (\\"value\\" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Foo = /*#__PURE__*/ function() {
    function Foo() {
        _class_call_check(this, Foo);
    }
    _create_class(Foo, [
        {
            key: \\"render\\",
            value: function render() {
                return /*#__PURE__*/ React.createElement(\\"div\\", {
                    className: \\"hehe\\"
                }, \\"hello there!!!\\");
            }
        }
    ]);
    return Foo;
}();

var bar = 'baz';

console.log(Foo);
console.log(bar);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) standalone minify 1`] = `
"console.log(1e4),console.log(\\"bc\\");
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) support rollup virtual module (e.g. commonjs plugin) 1`] = `
"function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var rollupCommonjs = {};

var foo;
var hasRequiredFoo;
function requireFoo() {
    if (hasRequiredFoo) return foo;
    hasRequiredFoo = 1;
    foo = 'foo';
    return foo;
}

var bar = {};

var hasRequiredBar;
function requireBar() {
    if (hasRequiredBar) return bar;
    hasRequiredBar = 1;
    bar.Bar = 'bar';
    return bar;
}

var hasRequiredRollupCommonjs;
function requireRollupCommonjs() {
    if (hasRequiredRollupCommonjs) return rollupCommonjs;
    hasRequiredRollupCommonjs = 1;
    const Foo = requireFoo();
    const { Bar } = requireBar();
    console.log(Foo, Bar);
    return rollupCommonjs;
}

var rollupCommonjsExports = requireRollupCommonjs();
var index = /*@__PURE__*/getDefaultExportFromCjs(rollupCommonjsExports);

export { index as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) target - include other files 1`] = `
"var module = {};

var hasRequiredModule;
function requireModule() {
    if (hasRequiredModule) return module;
    hasRequiredModule = 1;
    module.foo = 'sukka';
    return module;
}

var moduleExports = requireModule();

console.log(moduleExports.foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig - baseUrl & paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig - paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig - specify full path 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig extends 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig extends 2`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) tsconfig resolve to nearest tsconfig 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

var bar = /*#__PURE__*/ hBar(\\"div\\", null, \\"bar\\");

var baz = /*#__PURE__*/ h(\\"div\\", null, foo, bar);

export { baz };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) use custom jsxFactory (h) from jsconfig.json 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) use custom jsxFactory (h) from tsconfig 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) use custom tsconfig.json 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 2) use tsconfig.json when tsconfig.json & jsconfig.json both exists 1`] = `
"var foo = /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(\\"div\\", null, \\"foo\\"));

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) detect  decorator for typescript5 1`] = `
"function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== \\"undefined\\" && arr[Symbol.iterator] || arr[\\"@@iterator\\"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i[\\"return\\"] != null) _i[\\"return\\"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError(\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === \\"string\\") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === \\"Object\\" && o.constructor) n = o.constructor.name;
    if (n === \\"Map\\" || n === \\"Set\\") return Array.from(n);
    if (n === \\"Arguments\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function applyDecs2203RFactory() {
    function createAddInitializerMethod(initializers, decoratorFinishedRef) {
        return function addInitializer(initializer) {
            assertNotFinished(decoratorFinishedRef, \\"addInitializer\\");
            assertCallable(initializer, \\"An initializer\\");
            initializers.push(initializer);
        };
    }
    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {
        var kindStr;
        switch(kind){
            case 1:
                kindStr = \\"accessor\\";
                break;
            case 2:
                kindStr = \\"method\\";
                break;
            case 3:
                kindStr = \\"getter\\";
                break;
            case 4:
                kindStr = \\"setter\\";
                break;
            default:
                kindStr = \\"field\\";
        }
        var ctx = {
            kind: kindStr,
            name: isPrivate ? \\"#\\" + name : name,
            static: isStatic,
            private: isPrivate,
            metadata: metadata
        };
        var decoratorFinishedRef = {
            v: false
        };
        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
        var get, set;
        if (kind === 0) {
            if (isPrivate) {
                get = desc.get;
                set = desc.set;
            } else {
                get = function() {
                    return this[name];
                };
                set = function(v) {
                    this[name] = v;
                };
            }
        } else if (kind === 2) {
            get = function() {
                return desc.value;
            };
        } else {
            if (kind === 1 || kind === 3) {
                get = function() {
                    return desc.get.call(this);
                };
            }
            if (kind === 1 || kind === 4) {
                set = function(v) {
                    desc.set.call(this, v);
                };
            }
        }
        ctx.access = get && set ? {
            get: get,
            set: set
        } : get ? {
            get: get
        } : {
            set: set
        };
        try {
            return dec(value, ctx);
        } finally{
            decoratorFinishedRef.v = true;
        }
    }
    function assertNotFinished(decoratorFinishedRef, fnName) {
        if (decoratorFinishedRef.v) {
            throw new Error(\\"attempted to call \\" + fnName + \\" after decoration was finished\\");
        }
    }
    function assertCallable(fn, hint) {
        if (typeof fn !== \\"function\\") {
            throw new TypeError(hint + \\" must be a function\\");
        }
    }
    function assertValidReturnValue(kind, value) {
        var type = typeof value;
        if (kind === 1) {
            if (type !== \\"object\\" || value === null) {
                throw new TypeError(\\"accessor decorators must return an object with get, set, or init properties or void 0\\");
            }
            if (value.get !== undefined) {
                assertCallable(value.get, \\"accessor.get\\");
            }
            if (value.set !== undefined) {
                assertCallable(value.set, \\"accessor.set\\");
            }
            if (value.init !== undefined) {
                assertCallable(value.init, \\"accessor.init\\");
            }
        } else if (type !== \\"function\\") {
            var hint;
            if (kind === 0) {
                hint = \\"field\\";
            } else if (kind === 10) {
                hint = \\"class\\";
            } else {
                hint = \\"method\\";
            }
            throw new TypeError(hint + \\" decorators must return a function or void 0\\");
        }
    }
    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {
        var decs = decInfo[0];
        var desc, init, value;
        if (isPrivate) {
            if (kind === 0 || kind === 1) {
                desc = {
                    get: decInfo[3],
                    set: decInfo[4]
                };
            } else if (kind === 3) {
                desc = {
                    get: decInfo[3]
                };
            } else if (kind === 4) {
                desc = {
                    set: decInfo[3]
                };
            } else {
                desc = {
                    value: decInfo[3]
                };
            }
        } else if (kind !== 0) {
            desc = Object.getOwnPropertyDescriptor(base, name);
        }
        if (kind === 1) {
            value = {
                get: desc.get,
                set: desc.set
            };
        } else if (kind === 2) {
            value = desc.value;
        } else if (kind === 3) {
            value = desc.get;
        } else if (kind === 4) {
            value = desc.set;
        }
        var newValue, get, set;
        if (typeof decs === \\"function\\") {
            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
            if (newValue !== void 0) {
                assertValidReturnValue(kind, newValue);
                if (kind === 0) {
                    init = newValue;
                } else if (kind === 1) {
                    init = newValue.init;
                    get = newValue.get || value.get;
                    set = newValue.set || value.set;
                    value = {
                        get: get,
                        set: set
                    };
                } else {
                    value = newValue;
                }
            }
        } else {
            for(var i = decs.length - 1; i >= 0; i--){
                var dec = decs[i];
                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
                if (newValue !== void 0) {
                    assertValidReturnValue(kind, newValue);
                    var newInit;
                    if (kind === 0) {
                        newInit = newValue;
                    } else if (kind === 1) {
                        newInit = newValue.init;
                        get = newValue.get || value.get;
                        set = newValue.set || value.set;
                        value = {
                            get: get,
                            set: set
                        };
                    } else {
                        value = newValue;
                    }
                    if (newInit !== void 0) {
                        if (init === void 0) {
                            init = newInit;
                        } else if (typeof init === \\"function\\") {
                            init = [
                                init,
                                newInit
                            ];
                        } else {
                            init.push(newInit);
                        }
                    }
                }
            }
        }
        if (kind === 0 || kind === 1) {
            if (init === void 0) {
                init = function(instance, init) {
                    return init;
                };
            } else if (typeof init !== \\"function\\") {
                var ownInitializers = init;
                init = function(instance, init) {
                    var value = init;
                    for(var i = 0; i < ownInitializers.length; i++){
                        value = ownInitializers[i].call(instance, value);
                    }
                    return value;
                };
            } else {
                var originalInitializer = init;
                init = function(instance, init) {
                    return originalInitializer.call(instance, init);
                };
            }
            ret.push(init);
        }
        if (kind !== 0) {
            if (kind === 1) {
                desc.get = value.get;
                desc.set = value.set;
            } else if (kind === 2) {
                desc.value = value;
            } else if (kind === 3) {
                desc.get = value;
            } else if (kind === 4) {
                desc.set = value;
            }
            if (isPrivate) {
                if (kind === 1) {
                    ret.push(function(instance, args) {
                        return value.get.call(instance, args);
                    });
                    ret.push(function(instance, args) {
                        return value.set.call(instance, args);
                    });
                } else if (kind === 2) {
                    ret.push(value);
                } else {
                    ret.push(function(instance, args) {
                        return value.call(instance, args);
                    });
                }
            } else {
                Object.defineProperty(base, name, desc);
            }
        }
    }
    function applyMemberDecs(Class, decInfos, metadata) {
        var ret = [];
        var protoInitializers;
        var staticInitializers;
        var existingProtoNonFields = new Map();
        var existingStaticNonFields = new Map();
        for(var i = 0; i < decInfos.length; i++){
            var decInfo = decInfos[i];
            if (!Array.isArray(decInfo)) continue;
            var kind = decInfo[1];
            var name = decInfo[2];
            var isPrivate = decInfo.length > 3;
            var isStatic = kind >= 5;
            var base;
            var initializers;
            if (isStatic) {
                base = Class;
                kind = kind - 5;
                staticInitializers = staticInitializers || [];
                initializers = staticInitializers;
            } else {
                base = Class.prototype;
                protoInitializers = protoInitializers || [];
                initializers = protoInitializers;
            }
            if (kind !== 0 && !isPrivate) {
                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
                var existingKind = existingNonFields.get(name) || 0;
                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {
                    throw new Error(\\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \\" + name);
                } else if (!existingKind && kind > 2) {
                    existingNonFields.set(name, kind);
                } else {
                    existingNonFields.set(name, true);
                }
            }
            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);
        }
        pushInitializers(ret, protoInitializers);
        pushInitializers(ret, staticInitializers);
        return ret;
    }
    function pushInitializers(ret, initializers) {
        if (initializers) {
            ret.push(function(instance) {
                for(var i = 0; i < initializers.length; i++){
                    initializers[i].call(instance);
                }
                return instance;
            });
        }
    }
    function applyClassDecs(targetClass, classDecs, metadata) {
        if (classDecs.length > 0) {
            var initializers = [];
            var newClass = targetClass;
            var name = targetClass.name;
            for(var i = classDecs.length - 1; i >= 0; i--){
                var decoratorFinishedRef = {
                    v: false
                };
                try {
                    var nextNewClass = classDecs[i](newClass, {
                        kind: \\"class\\",
                        name: name,
                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),
                        metadata
                    });
                } finally{
                    decoratorFinishedRef.v = true;
                }
                if (nextNewClass !== undefined) {
                    assertValidReturnValue(10, nextNewClass);
                    newClass = nextNewClass;
                }
            }
            return [
                defineMetadata(newClass, metadata),
                function() {
                    for(var i = 0; i < initializers.length; i++){
                        initializers[i].call(newClass);
                    }
                }
            ];
        }
    }
    function defineMetadata(Class, metadata) {
        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\\"Symbol.metadata\\"), {
            configurable: true,
            enumerable: true,
            value: metadata
        });
    }
    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {
        if (parentClass !== void 0) {
            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\\"Symbol.metadata\\")];
        }
        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);
        var e = applyMemberDecs(targetClass, memberDecs, metadata);
        if (!classDecs.length) defineMetadata(targetClass, metadata);
        return {
            e: e,
            get c () {
                return applyClassDecs(targetClass, classDecs, metadata);
            }
        };
    };
}
function _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {
    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);
}
var // @ts-expect-error
_init_name;
var printMemberName = function(target, memberName) {
    console.log(memberName);
};
var Person = function Person() {
    _class_call_check(this, Person);
    _define_property(this, \\"name\\", _init_name(this, \\"Jon\\"));
};
var ref, ref1;
ref = _apply_decs_2203_r(Person, [
    [
        printMemberName,
        0,
        \\"name\\"
    ]
], []), ref1 = _sliced_to_array(ref.e, 1), _init_name = ref1[0];
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) directive - include "use client" 1`] = `
"'use client';
function client() {
    return React.useState(null);
}

export { client as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) directive - merge "use client" 1`] = `
"'use client';
'use sukka';
var foo = 'sukka';

var bar = 'sukka';

export { bar, foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) directive - only output "use client" / "use server" in the specfic entry 1`] = `
"'use client';
var foo = 'client';

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) directive - only output "use client" / "use server" in the specfic entry 2`] = `
"'use server';
var bar = 'server';

export { bar };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) disable reading tsconfig.json 1`] = `
"const foo = 1;

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) issue 58 - eventemitter3 1`] = `
"function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var eventemitter3 = {exports: {}};

var hasRequiredEventemitter3;

function requireEventemitter3 () {
	if (hasRequiredEventemitter3) return eventemitter3.exports;
	hasRequiredEventemitter3 = 1;
	(function (module) {

		var has = Object.prototype.hasOwnProperty
		  , prefix = '~';

		/**
		 * Constructor to create a storage for our \`EE\` objects.
		 * An \`Events\` instance is a plain object whose properties are event names.
		 *
		 * @constructor
		 * @private
		 */
		function Events() {}

		//
		// We try to not inherit from \`Object.prototype\`. In some engines creating an
		// instance in this way is faster than calling \`Object.create(null)\` directly.
		// If \`Object.create(null)\` is not supported we prefix the event names with a
		// character to make sure that the built-in object properties are not
		// overridden or used as an attack vector.
		//
		if (Object.create) {
		  Events.prototype = Object.create(null);

		  //
		  // This hack is needed because the \`__proto__\` property is still inherited in
		  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
		  //
		  if (!new Events().__proto__) prefix = false;
		}

		/**
		 * Representation of a single event listener.
		 *
		 * @param {Function} fn The listener function.
		 * @param {*} context The context to invoke the listener with.
		 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
		 * @constructor
		 * @private
		 */
		function EE(fn, context, once) {
		  this.fn = fn;
		  this.context = context;
		  this.once = once || false;
		}

		/**
		 * Add a listener for a given event.
		 *
		 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} context The context to invoke the listener with.
		 * @param {Boolean} once Specify if the listener is a one-time listener.
		 * @returns {EventEmitter}
		 * @private
		 */
		function addListener(emitter, event, fn, context, once) {
		  if (typeof fn !== 'function') {
		    throw new TypeError('The listener must be a function');
		  }

		  var listener = new EE(fn, context || emitter, once)
		    , evt = prefix ? prefix + event : event;

		  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
		  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
		  else emitter._events[evt] = [emitter._events[evt], listener];

		  return emitter;
		}

		/**
		 * Clear event by name.
		 *
		 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
		 * @param {(String|Symbol)} evt The Event name.
		 * @private
		 */
		function clearEvent(emitter, evt) {
		  if (--emitter._eventsCount === 0) emitter._events = new Events();
		  else delete emitter._events[evt];
		}

		/**
		 * Minimal \`EventEmitter\` interface that is molded against the Node.js
		 * \`EventEmitter\` interface.
		 *
		 * @constructor
		 * @public
		 */
		function EventEmitter() {
		  this._events = new Events();
		  this._eventsCount = 0;
		}

		/**
		 * Return an array listing the events for which the emitter has registered
		 * listeners.
		 *
		 * @returns {Array}
		 * @public
		 */
		EventEmitter.prototype.eventNames = function eventNames() {
		  var names = []
		    , events
		    , name;

		  if (this._eventsCount === 0) return names;

		  for (name in (events = this._events)) {
		    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
		  }

		  if (Object.getOwnPropertySymbols) {
		    return names.concat(Object.getOwnPropertySymbols(events));
		  }

		  return names;
		};

		/**
		 * Return the listeners registered for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Array} The registered listeners.
		 * @public
		 */
		EventEmitter.prototype.listeners = function listeners(event) {
		  var evt = prefix ? prefix + event : event
		    , handlers = this._events[evt];

		  if (!handlers) return [];
		  if (handlers.fn) return [handlers.fn];

		  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
		    ee[i] = handlers[i].fn;
		  }

		  return ee;
		};

		/**
		 * Return the number of listeners listening to a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Number} The number of listeners.
		 * @public
		 */
		EventEmitter.prototype.listenerCount = function listenerCount(event) {
		  var evt = prefix ? prefix + event : event
		    , listeners = this._events[evt];

		  if (!listeners) return 0;
		  if (listeners.fn) return 1;
		  return listeners.length;
		};

		/**
		 * Calls each of the listeners registered for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Boolean} \`true\` if the event had listeners, else \`false\`.
		 * @public
		 */
		EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
		  var evt = prefix ? prefix + event : event;

		  if (!this._events[evt]) return false;

		  var listeners = this._events[evt]
		    , len = arguments.length
		    , args
		    , i;

		  if (listeners.fn) {
		    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

		    switch (len) {
		      case 1: return listeners.fn.call(listeners.context), true;
		      case 2: return listeners.fn.call(listeners.context, a1), true;
		      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
		      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
		      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
		      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
		    }

		    for (i = 1, args = new Array(len -1); i < len; i++) {
		      args[i - 1] = arguments[i];
		    }

		    listeners.fn.apply(listeners.context, args);
		  } else {
		    var length = listeners.length
		      , j;

		    for (i = 0; i < length; i++) {
		      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

		      switch (len) {
		        case 1: listeners[i].fn.call(listeners[i].context); break;
		        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
		        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
		        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
		        default:
		          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
		            args[j - 1] = arguments[j];
		          }

		          listeners[i].fn.apply(listeners[i].context, args);
		      }
		    }
		  }

		  return true;
		};

		/**
		 * Add a listener for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} [context=this] The context to invoke the listener with.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.on = function on(event, fn, context) {
		  return addListener(this, event, fn, context, false);
		};

		/**
		 * Add a one-time listener for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} [context=this] The context to invoke the listener with.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.once = function once(event, fn, context) {
		  return addListener(this, event, fn, context, true);
		};

		/**
		 * Remove the listeners of a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn Only remove the listeners that match this function.
		 * @param {*} context Only remove the listeners that have this context.
		 * @param {Boolean} once Only remove one-time listeners.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
		  var evt = prefix ? prefix + event : event;

		  if (!this._events[evt]) return this;
		  if (!fn) {
		    clearEvent(this, evt);
		    return this;
		  }

		  var listeners = this._events[evt];

		  if (listeners.fn) {
		    if (
		      listeners.fn === fn &&
		      (!once || listeners.once) &&
		      (!context || listeners.context === context)
		    ) {
		      clearEvent(this, evt);
		    }
		  } else {
		    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
		      if (
		        listeners[i].fn !== fn ||
		        (once && !listeners[i].once) ||
		        (context && listeners[i].context !== context)
		      ) {
		        events.push(listeners[i]);
		      }
		    }

		    //
		    // Reset the array, or remove it completely if we have no more listeners.
		    //
		    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
		    else clearEvent(this, evt);
		  }

		  return this;
		};

		/**
		 * Remove all listeners, or those of the specified event.
		 *
		 * @param {(String|Symbol)} [event] The event name.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
		  var evt;

		  if (event) {
		    evt = prefix ? prefix + event : event;
		    if (this._events[evt]) clearEvent(this, evt);
		  } else {
		    this._events = new Events();
		    this._eventsCount = 0;
		  }

		  return this;
		};

		//
		// Alias methods names because people roll like that.
		//
		EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
		EventEmitter.prototype.addListener = EventEmitter.prototype.on;

		//
		// Expose the prefix.
		//
		EventEmitter.prefixed = prefix;

		//
		// Allow \`EventEmitter\` to be imported as module namespace.
		//
		EventEmitter.EventEmitter = EventEmitter;

		//
		// Expose the module.
		//
		{
		  module.exports = EventEmitter;
		} 
	} (eventemitter3));
	return eventemitter3.exports;
}

var eventemitter3Exports = requireEventemitter3();
var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

// @ts-expect-error -- the dependency is only installed during test
var ee = new EventEmitter();
ee.on('test', function() {
    console.log('test');
});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) issue 63 - tsconfig baseUrl only + relative baseUrl 1`] = `
"function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError(\\"Cannot initialize the same private elements twice on an object\\");
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function test(s) {
    console.log(s);
}
test('hello swc!');
var _es2022Feature = /*#__PURE__*/ new WeakMap();
var Test = function Test() {
    _class_call_check(this, Test);
    _class_private_field_init(this, _es2022Feature, {
        writable: true,
        value: true
    });
};

export { Test };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) load json 1`] = `
"var foo = true;
var foo$1 = {
	foo: foo
};

console.log(foo$1);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) load jsx/tsx 1`] = `
"const util = 42;

class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"sukka\\"
        }, util);
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) minify 1`] = `
"console.log(class{render(){return /*#__PURE__*/React.createElement(\\"div\\",{className:\\"hehe\\"},\\"hello there!!!\\")}});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) react 17 jsx transform 1`] = `
"import { jsx } from 'react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) react 17 jsx transform 2`] = `
"import { jsx } from '@compiled/react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) resolve index.(x) 1`] = `
"class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"hehe\\"
        }, \\"hello there!!!\\");
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) simple 1`] = `
"function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if (\\"value\\" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Foo = /*#__PURE__*/ function() {
    function Foo() {
        _class_call_check(this, Foo);
    }
    _create_class(Foo, [
        {
            key: \\"render\\",
            value: function render() {
                return /*#__PURE__*/ React.createElement(\\"div\\", {
                    className: \\"hehe\\"
                }, \\"hello there!!!\\");
            }
        }
    ]);
    return Foo;
}();

var bar = 'baz';

console.log(Foo);
console.log(bar);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) standalone minify 1`] = `
"console.log(1e4),console.log(\\"bc\\");
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) support rollup virtual module (e.g. commonjs plugin) 1`] = `
"function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var rollupCommonjs = {};

var foo;
var hasRequiredFoo;
function requireFoo() {
    if (hasRequiredFoo) return foo;
    hasRequiredFoo = 1;
    foo = 'foo';
    return foo;
}

var bar = {};

var hasRequiredBar;
function requireBar() {
    if (hasRequiredBar) return bar;
    hasRequiredBar = 1;
    bar.Bar = 'bar';
    return bar;
}

var hasRequiredRollupCommonjs;
function requireRollupCommonjs() {
    if (hasRequiredRollupCommonjs) return rollupCommonjs;
    hasRequiredRollupCommonjs = 1;
    const Foo = requireFoo();
    const { Bar } = requireBar();
    console.log(Foo, Bar);
    return rollupCommonjs;
}

var rollupCommonjsExports = requireRollupCommonjs();
var index = /*@__PURE__*/getDefaultExportFromCjs(rollupCommonjsExports);

export { index as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) target - include other files 1`] = `
"var module = {};

var hasRequiredModule;
function requireModule() {
    if (hasRequiredModule) return module;
    hasRequiredModule = 1;
    module.foo = 'sukka';
    return module;
}

var moduleExports = requireModule();

console.log(moduleExports.foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig - baseUrl & paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig - paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig - specify full path 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig extends 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig extends 2`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) tsconfig resolve to nearest tsconfig 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

var bar = /*#__PURE__*/ hBar(\\"div\\", null, \\"bar\\");

var baz = /*#__PURE__*/ h(\\"div\\", null, foo, bar);

export { baz };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) use custom jsxFactory (h) from jsconfig.json 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) use custom jsxFactory (h) from tsconfig 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) use custom tsconfig.json 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 3) use tsconfig.json when tsconfig.json & jsconfig.json both exists 1`] = `
"var foo = /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(\\"div\\", null, \\"foo\\"));

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) detect  decorator for typescript5 1`] = `
"function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== \\"undefined\\" && arr[Symbol.iterator] || arr[\\"@@iterator\\"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i[\\"return\\"] != null) _i[\\"return\\"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError(\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === \\"string\\") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === \\"Object\\" && o.constructor) n = o.constructor.name;
    if (n === \\"Map\\" || n === \\"Set\\") return Array.from(n);
    if (n === \\"Arguments\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function applyDecs2203RFactory() {
    function createAddInitializerMethod(initializers, decoratorFinishedRef) {
        return function addInitializer(initializer) {
            assertNotFinished(decoratorFinishedRef, \\"addInitializer\\");
            assertCallable(initializer, \\"An initializer\\");
            initializers.push(initializer);
        };
    }
    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {
        var kindStr;
        switch(kind){
            case 1:
                kindStr = \\"accessor\\";
                break;
            case 2:
                kindStr = \\"method\\";
                break;
            case 3:
                kindStr = \\"getter\\";
                break;
            case 4:
                kindStr = \\"setter\\";
                break;
            default:
                kindStr = \\"field\\";
        }
        var ctx = {
            kind: kindStr,
            name: isPrivate ? \\"#\\" + name : name,
            static: isStatic,
            private: isPrivate,
            metadata: metadata
        };
        var decoratorFinishedRef = {
            v: false
        };
        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
        var get, set;
        if (kind === 0) {
            if (isPrivate) {
                get = desc.get;
                set = desc.set;
            } else {
                get = function() {
                    return this[name];
                };
                set = function(v) {
                    this[name] = v;
                };
            }
        } else if (kind === 2) {
            get = function() {
                return desc.value;
            };
        } else {
            if (kind === 1 || kind === 3) {
                get = function() {
                    return desc.get.call(this);
                };
            }
            if (kind === 1 || kind === 4) {
                set = function(v) {
                    desc.set.call(this, v);
                };
            }
        }
        ctx.access = get && set ? {
            get: get,
            set: set
        } : get ? {
            get: get
        } : {
            set: set
        };
        try {
            return dec(value, ctx);
        } finally{
            decoratorFinishedRef.v = true;
        }
    }
    function assertNotFinished(decoratorFinishedRef, fnName) {
        if (decoratorFinishedRef.v) {
            throw new Error(\\"attempted to call \\" + fnName + \\" after decoration was finished\\");
        }
    }
    function assertCallable(fn, hint) {
        if (typeof fn !== \\"function\\") {
            throw new TypeError(hint + \\" must be a function\\");
        }
    }
    function assertValidReturnValue(kind, value) {
        var type = typeof value;
        if (kind === 1) {
            if (type !== \\"object\\" || value === null) {
                throw new TypeError(\\"accessor decorators must return an object with get, set, or init properties or void 0\\");
            }
            if (value.get !== undefined) {
                assertCallable(value.get, \\"accessor.get\\");
            }
            if (value.set !== undefined) {
                assertCallable(value.set, \\"accessor.set\\");
            }
            if (value.init !== undefined) {
                assertCallable(value.init, \\"accessor.init\\");
            }
        } else if (type !== \\"function\\") {
            var hint;
            if (kind === 0) {
                hint = \\"field\\";
            } else if (kind === 10) {
                hint = \\"class\\";
            } else {
                hint = \\"method\\";
            }
            throw new TypeError(hint + \\" decorators must return a function or void 0\\");
        }
    }
    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {
        var decs = decInfo[0];
        var desc, init, value;
        if (isPrivate) {
            if (kind === 0 || kind === 1) {
                desc = {
                    get: decInfo[3],
                    set: decInfo[4]
                };
            } else if (kind === 3) {
                desc = {
                    get: decInfo[3]
                };
            } else if (kind === 4) {
                desc = {
                    set: decInfo[3]
                };
            } else {
                desc = {
                    value: decInfo[3]
                };
            }
        } else if (kind !== 0) {
            desc = Object.getOwnPropertyDescriptor(base, name);
        }
        if (kind === 1) {
            value = {
                get: desc.get,
                set: desc.set
            };
        } else if (kind === 2) {
            value = desc.value;
        } else if (kind === 3) {
            value = desc.get;
        } else if (kind === 4) {
            value = desc.set;
        }
        var newValue, get, set;
        if (typeof decs === \\"function\\") {
            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
            if (newValue !== void 0) {
                assertValidReturnValue(kind, newValue);
                if (kind === 0) {
                    init = newValue;
                } else if (kind === 1) {
                    init = newValue.init;
                    get = newValue.get || value.get;
                    set = newValue.set || value.set;
                    value = {
                        get: get,
                        set: set
                    };
                } else {
                    value = newValue;
                }
            }
        } else {
            for(var i = decs.length - 1; i >= 0; i--){
                var dec = decs[i];
                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
                if (newValue !== void 0) {
                    assertValidReturnValue(kind, newValue);
                    var newInit;
                    if (kind === 0) {
                        newInit = newValue;
                    } else if (kind === 1) {
                        newInit = newValue.init;
                        get = newValue.get || value.get;
                        set = newValue.set || value.set;
                        value = {
                            get: get,
                            set: set
                        };
                    } else {
                        value = newValue;
                    }
                    if (newInit !== void 0) {
                        if (init === void 0) {
                            init = newInit;
                        } else if (typeof init === \\"function\\") {
                            init = [
                                init,
                                newInit
                            ];
                        } else {
                            init.push(newInit);
                        }
                    }
                }
            }
        }
        if (kind === 0 || kind === 1) {
            if (init === void 0) {
                init = function(instance, init) {
                    return init;
                };
            } else if (typeof init !== \\"function\\") {
                var ownInitializers = init;
                init = function(instance, init) {
                    var value = init;
                    for(var i = 0; i < ownInitializers.length; i++){
                        value = ownInitializers[i].call(instance, value);
                    }
                    return value;
                };
            } else {
                var originalInitializer = init;
                init = function(instance, init) {
                    return originalInitializer.call(instance, init);
                };
            }
            ret.push(init);
        }
        if (kind !== 0) {
            if (kind === 1) {
                desc.get = value.get;
                desc.set = value.set;
            } else if (kind === 2) {
                desc.value = value;
            } else if (kind === 3) {
                desc.get = value;
            } else if (kind === 4) {
                desc.set = value;
            }
            if (isPrivate) {
                if (kind === 1) {
                    ret.push(function(instance, args) {
                        return value.get.call(instance, args);
                    });
                    ret.push(function(instance, args) {
                        return value.set.call(instance, args);
                    });
                } else if (kind === 2) {
                    ret.push(value);
                } else {
                    ret.push(function(instance, args) {
                        return value.call(instance, args);
                    });
                }
            } else {
                Object.defineProperty(base, name, desc);
            }
        }
    }
    function applyMemberDecs(Class, decInfos, metadata) {
        var ret = [];
        var protoInitializers;
        var staticInitializers;
        var existingProtoNonFields = new Map();
        var existingStaticNonFields = new Map();
        for(var i = 0; i < decInfos.length; i++){
            var decInfo = decInfos[i];
            if (!Array.isArray(decInfo)) continue;
            var kind = decInfo[1];
            var name = decInfo[2];
            var isPrivate = decInfo.length > 3;
            var isStatic = kind >= 5;
            var base;
            var initializers;
            if (isStatic) {
                base = Class;
                kind = kind - 5;
                staticInitializers = staticInitializers || [];
                initializers = staticInitializers;
            } else {
                base = Class.prototype;
                protoInitializers = protoInitializers || [];
                initializers = protoInitializers;
            }
            if (kind !== 0 && !isPrivate) {
                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
                var existingKind = existingNonFields.get(name) || 0;
                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {
                    throw new Error(\\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \\" + name);
                } else if (!existingKind && kind > 2) {
                    existingNonFields.set(name, kind);
                } else {
                    existingNonFields.set(name, true);
                }
            }
            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);
        }
        pushInitializers(ret, protoInitializers);
        pushInitializers(ret, staticInitializers);
        return ret;
    }
    function pushInitializers(ret, initializers) {
        if (initializers) {
            ret.push(function(instance) {
                for(var i = 0; i < initializers.length; i++){
                    initializers[i].call(instance);
                }
                return instance;
            });
        }
    }
    function applyClassDecs(targetClass, classDecs, metadata) {
        if (classDecs.length > 0) {
            var initializers = [];
            var newClass = targetClass;
            var name = targetClass.name;
            for(var i = classDecs.length - 1; i >= 0; i--){
                var decoratorFinishedRef = {
                    v: false
                };
                try {
                    var nextNewClass = classDecs[i](newClass, {
                        kind: \\"class\\",
                        name: name,
                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),
                        metadata
                    });
                } finally{
                    decoratorFinishedRef.v = true;
                }
                if (nextNewClass !== undefined) {
                    assertValidReturnValue(10, nextNewClass);
                    newClass = nextNewClass;
                }
            }
            return [
                defineMetadata(newClass, metadata),
                function() {
                    for(var i = 0; i < initializers.length; i++){
                        initializers[i].call(newClass);
                    }
                }
            ];
        }
    }
    function defineMetadata(Class, metadata) {
        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\\"Symbol.metadata\\"), {
            configurable: true,
            enumerable: true,
            value: metadata
        });
    }
    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {
        if (parentClass !== void 0) {
            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\\"Symbol.metadata\\")];
        }
        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);
        var e = applyMemberDecs(targetClass, memberDecs, metadata);
        if (!classDecs.length) defineMetadata(targetClass, metadata);
        return {
            e: e,
            get c () {
                return applyClassDecs(targetClass, classDecs, metadata);
            }
        };
    };
}
function _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {
    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);
}
var // @ts-expect-error
_init_name;
var printMemberName = function(target, memberName) {
    console.log(memberName);
};
var Person = function Person() {
    _class_call_check(this, Person);
    _define_property(this, \\"name\\", _init_name(this, \\"Jon\\"));
};
var ref, ref1;
ref = _apply_decs_2203_r(Person, [
    [
        printMemberName,
        0,
        \\"name\\"
    ]
], []), ref1 = _sliced_to_array(ref.e, 1), _init_name = ref1[0];
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) directive - include "use client" 1`] = `
"'use client';
function client() {
    return React.useState(null);
}

export { client as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) directive - merge "use client" 1`] = `
"'use client';
'use sukka';
var foo = 'sukka';

var bar = 'sukka';

export { bar, foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) directive - only output "use client" / "use server" in the specfic entry 1`] = `
"'use client';
var foo = 'client';

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) directive - only output "use client" / "use server" in the specfic entry 2`] = `
"'use server';
var bar = 'server';

export { bar };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) disable reading tsconfig.json 1`] = `
"const foo = 1;

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) issue 58 - eventemitter3 1`] = `
"function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var eventemitter3 = {exports: {}};

var hasRequiredEventemitter3;

function requireEventemitter3 () {
	if (hasRequiredEventemitter3) return eventemitter3.exports;
	hasRequiredEventemitter3 = 1;
	(function (module) {

		var has = Object.prototype.hasOwnProperty
		  , prefix = '~';

		/**
		 * Constructor to create a storage for our \`EE\` objects.
		 * An \`Events\` instance is a plain object whose properties are event names.
		 *
		 * @constructor
		 * @private
		 */
		function Events() {}

		//
		// We try to not inherit from \`Object.prototype\`. In some engines creating an
		// instance in this way is faster than calling \`Object.create(null)\` directly.
		// If \`Object.create(null)\` is not supported we prefix the event names with a
		// character to make sure that the built-in object properties are not
		// overridden or used as an attack vector.
		//
		if (Object.create) {
		  Events.prototype = Object.create(null);

		  //
		  // This hack is needed because the \`__proto__\` property is still inherited in
		  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
		  //
		  if (!new Events().__proto__) prefix = false;
		}

		/**
		 * Representation of a single event listener.
		 *
		 * @param {Function} fn The listener function.
		 * @param {*} context The context to invoke the listener with.
		 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
		 * @constructor
		 * @private
		 */
		function EE(fn, context, once) {
		  this.fn = fn;
		  this.context = context;
		  this.once = once || false;
		}

		/**
		 * Add a listener for a given event.
		 *
		 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} context The context to invoke the listener with.
		 * @param {Boolean} once Specify if the listener is a one-time listener.
		 * @returns {EventEmitter}
		 * @private
		 */
		function addListener(emitter, event, fn, context, once) {
		  if (typeof fn !== 'function') {
		    throw new TypeError('The listener must be a function');
		  }

		  var listener = new EE(fn, context || emitter, once)
		    , evt = prefix ? prefix + event : event;

		  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
		  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
		  else emitter._events[evt] = [emitter._events[evt], listener];

		  return emitter;
		}

		/**
		 * Clear event by name.
		 *
		 * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
		 * @param {(String|Symbol)} evt The Event name.
		 * @private
		 */
		function clearEvent(emitter, evt) {
		  if (--emitter._eventsCount === 0) emitter._events = new Events();
		  else delete emitter._events[evt];
		}

		/**
		 * Minimal \`EventEmitter\` interface that is molded against the Node.js
		 * \`EventEmitter\` interface.
		 *
		 * @constructor
		 * @public
		 */
		function EventEmitter() {
		  this._events = new Events();
		  this._eventsCount = 0;
		}

		/**
		 * Return an array listing the events for which the emitter has registered
		 * listeners.
		 *
		 * @returns {Array}
		 * @public
		 */
		EventEmitter.prototype.eventNames = function eventNames() {
		  var names = []
		    , events
		    , name;

		  if (this._eventsCount === 0) return names;

		  for (name in (events = this._events)) {
		    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
		  }

		  if (Object.getOwnPropertySymbols) {
		    return names.concat(Object.getOwnPropertySymbols(events));
		  }

		  return names;
		};

		/**
		 * Return the listeners registered for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Array} The registered listeners.
		 * @public
		 */
		EventEmitter.prototype.listeners = function listeners(event) {
		  var evt = prefix ? prefix + event : event
		    , handlers = this._events[evt];

		  if (!handlers) return [];
		  if (handlers.fn) return [handlers.fn];

		  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
		    ee[i] = handlers[i].fn;
		  }

		  return ee;
		};

		/**
		 * Return the number of listeners listening to a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Number} The number of listeners.
		 * @public
		 */
		EventEmitter.prototype.listenerCount = function listenerCount(event) {
		  var evt = prefix ? prefix + event : event
		    , listeners = this._events[evt];

		  if (!listeners) return 0;
		  if (listeners.fn) return 1;
		  return listeners.length;
		};

		/**
		 * Calls each of the listeners registered for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Boolean} \`true\` if the event had listeners, else \`false\`.
		 * @public
		 */
		EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
		  var evt = prefix ? prefix + event : event;

		  if (!this._events[evt]) return false;

		  var listeners = this._events[evt]
		    , len = arguments.length
		    , args
		    , i;

		  if (listeners.fn) {
		    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

		    switch (len) {
		      case 1: return listeners.fn.call(listeners.context), true;
		      case 2: return listeners.fn.call(listeners.context, a1), true;
		      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
		      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
		      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
		      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
		    }

		    for (i = 1, args = new Array(len -1); i < len; i++) {
		      args[i - 1] = arguments[i];
		    }

		    listeners.fn.apply(listeners.context, args);
		  } else {
		    var length = listeners.length
		      , j;

		    for (i = 0; i < length; i++) {
		      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

		      switch (len) {
		        case 1: listeners[i].fn.call(listeners[i].context); break;
		        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
		        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
		        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
		        default:
		          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
		            args[j - 1] = arguments[j];
		          }

		          listeners[i].fn.apply(listeners[i].context, args);
		      }
		    }
		  }

		  return true;
		};

		/**
		 * Add a listener for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} [context=this] The context to invoke the listener with.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.on = function on(event, fn, context) {
		  return addListener(this, event, fn, context, false);
		};

		/**
		 * Add a one-time listener for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} [context=this] The context to invoke the listener with.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.once = function once(event, fn, context) {
		  return addListener(this, event, fn, context, true);
		};

		/**
		 * Remove the listeners of a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn Only remove the listeners that match this function.
		 * @param {*} context Only remove the listeners that have this context.
		 * @param {Boolean} once Only remove one-time listeners.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
		  var evt = prefix ? prefix + event : event;

		  if (!this._events[evt]) return this;
		  if (!fn) {
		    clearEvent(this, evt);
		    return this;
		  }

		  var listeners = this._events[evt];

		  if (listeners.fn) {
		    if (
		      listeners.fn === fn &&
		      (!once || listeners.once) &&
		      (!context || listeners.context === context)
		    ) {
		      clearEvent(this, evt);
		    }
		  } else {
		    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
		      if (
		        listeners[i].fn !== fn ||
		        (once && !listeners[i].once) ||
		        (context && listeners[i].context !== context)
		      ) {
		        events.push(listeners[i]);
		      }
		    }

		    //
		    // Reset the array, or remove it completely if we have no more listeners.
		    //
		    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
		    else clearEvent(this, evt);
		  }

		  return this;
		};

		/**
		 * Remove all listeners, or those of the specified event.
		 *
		 * @param {(String|Symbol)} [event] The event name.
		 * @returns {EventEmitter} \`this\`.
		 * @public
		 */
		EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
		  var evt;

		  if (event) {
		    evt = prefix ? prefix + event : event;
		    if (this._events[evt]) clearEvent(this, evt);
		  } else {
		    this._events = new Events();
		    this._eventsCount = 0;
		  }

		  return this;
		};

		//
		// Alias methods names because people roll like that.
		//
		EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
		EventEmitter.prototype.addListener = EventEmitter.prototype.on;

		//
		// Expose the prefix.
		//
		EventEmitter.prefixed = prefix;

		//
		// Allow \`EventEmitter\` to be imported as module namespace.
		//
		EventEmitter.EventEmitter = EventEmitter;

		//
		// Expose the module.
		//
		{
		  module.exports = EventEmitter;
		} 
	} (eventemitter3));
	return eventemitter3.exports;
}

var eventemitter3Exports = requireEventemitter3();
var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

// @ts-expect-error -- the dependency is only installed during test
var ee = new EventEmitter();
ee.on('test', function() {
    console.log('test');
});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) issue 63 - tsconfig baseUrl only + relative baseUrl 1`] = `
"function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError(\\"Cannot initialize the same private elements twice on an object\\");
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function test(s) {
    console.log(s);
}
test('hello swc!');
var _es2022Feature = /*#__PURE__*/ new WeakMap();
var Test = function Test() {
    _class_call_check(this, Test);
    _class_private_field_init(this, _es2022Feature, {
        writable: true,
        value: true
    });
};

export { Test };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) load json 1`] = `
"var foo = true;
var foo$1 = {
	foo: foo
};

console.log(foo$1);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) load jsx/tsx 1`] = `
"const util = 42;

class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"sukka\\"
        }, util);
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) minify 1`] = `
"console.log(class{render(){return /*#__PURE__*/React.createElement(\\"div\\",{className:\\"hehe\\"},\\"hello there!!!\\")}});
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) react 17 jsx transform 1`] = `
"import { jsx } from 'react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) react 17 jsx transform 2`] = `
"import { jsx } from '@compiled/react/jsx-runtime';

function Foo() {
    return /*#__PURE__*/ jsx(\\"div\\", {
        children: \\"foo\\"
    });
}

export { Foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) resolve index.(x) 1`] = `
"class Foo {
    render() {
        return /*#__PURE__*/ React.createElement(\\"div\\", {
            className: \\"hehe\\"
        }, \\"hello there!!!\\");
    }
}

console.log(Foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) simple 1`] = `
"function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError(\\"Cannot call a class as a function\\");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if (\\"value\\" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    return Constructor;
}
var Foo = /*#__PURE__*/ function() {
    function Foo() {
        _class_call_check(this, Foo);
    }
    _create_class(Foo, [
        {
            key: \\"render\\",
            value: function render() {
                return /*#__PURE__*/ React.createElement(\\"div\\", {
                    className: \\"hehe\\"
                }, \\"hello there!!!\\");
            }
        }
    ]);
    return Foo;
}();

var bar = 'baz';

console.log(Foo);
console.log(bar);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) standalone minify 1`] = `
"console.log(1e4),console.log(\\"bc\\");
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) support rollup virtual module (e.g. commonjs plugin) 1`] = `
"function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var rollupCommonjs = {};

var foo;
var hasRequiredFoo;
function requireFoo() {
    if (hasRequiredFoo) return foo;
    hasRequiredFoo = 1;
    foo = 'foo';
    return foo;
}

var bar = {};

var hasRequiredBar;
function requireBar() {
    if (hasRequiredBar) return bar;
    hasRequiredBar = 1;
    bar.Bar = 'bar';
    return bar;
}

var hasRequiredRollupCommonjs;
function requireRollupCommonjs() {
    if (hasRequiredRollupCommonjs) return rollupCommonjs;
    hasRequiredRollupCommonjs = 1;
    const Foo = requireFoo();
    const { Bar } = requireBar();
    console.log(Foo, Bar);
    return rollupCommonjs;
}

var rollupCommonjsExports = requireRollupCommonjs();
var index = /*@__PURE__*/getDefaultExportFromCjs(rollupCommonjsExports);

export { index as default };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) target - include other files 1`] = `
"var module = {};

var hasRequiredModule;
function requireModule() {
    if (hasRequiredModule) return module;
    hasRequiredModule = 1;
    module.foo = 'sukka';
    return module;
}

var moduleExports = requireModule();

console.log(moduleExports.foo);
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig - baseUrl & paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig - paths 1`] = `
"var a = function(input) {
    return 'a' + input;
};

var b = 'b';

console.log(a(b));
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig - specify full path 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig extends 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig extends 2`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) tsconfig resolve to nearest tsconfig 1`] = `
"var foo = /*#__PURE__*/ hFoo(\\"div\\", null, \\"foo\\");

var bar = /*#__PURE__*/ hBar(\\"div\\", null, \\"bar\\");

var baz = /*#__PURE__*/ h(\\"div\\", null, foo, bar);

export { baz };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) use custom jsxFactory (h) from jsconfig.json 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) use custom jsxFactory (h) from tsconfig 1`] = `
"var foo = /*#__PURE__*/ h(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) use custom tsconfig.json 1`] = `
"var foo = /*#__PURE__*/ custom(\\"div\\", null, \\"foo\\");

export { foo };
"
`;

exports[`rollup-plugin-swc3 swc (rollup 4) use tsconfig.json when tsconfig.json & jsconfig.json both exists 1`] = `
"var foo = /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(\\"div\\", null, \\"foo\\"));

export { foo };
"
`;
